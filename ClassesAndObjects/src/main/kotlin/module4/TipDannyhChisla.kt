package module4

fun main() {
    /*                                   ТИПЫ ДАННЫХ. ЧИСЛА
         ЦЕЛИ:
         - Узнать, с помощью каких типов данных описываються числа
         - Выяснить, каие опрерации предоставляют числовые типы данных
         = Пояснить, как инициализировать числовые переменные

         Типы данных. Чмсла

         Целые числа
         Byte (-128...127)
         Short(-32768...32767)
         Int(-2,147,438,648...2,147,484,647)
         Long(-9,223,372,036,847,775,808...9,223,372,036,847,775,807)
         есть еще биг интеджер это еще больше

         Числа с плавающей точкой
         Fioat(-3.4*10 в 38 степени...-3.4*10 в 38 степени)
         Double(еще больше). Включает в себя зарезервированные значаения Nan, INFINITY(они
         могут быть полученны при неверных арифметических операциях(деление на ноль или
         извлечение корня из отрицательного числа))

         Для целых чисел по умолчанию присваиваеться тип Int, при условии что число попадает
         в диапозог типа Int.

         если мы добавим к числу литерал L, то оно станет Long */

    val c = 10000L  //если у переменной явно указан тип Long (var c: Long = 10000), то не нужно
    // указывать L
    // Чего не скажешь про тип Float, где нужно указывать f

    val floatNumber: Float = 2.0f

    /* Для преобразования одного типа в другой Kotlin предоставляет специальные функции конвертации
    toLong() toInt()  и тд. */

    // Арифмитические операции в Kotlin

    val a = 5
    val b = 11
    println("a + b = ${a + b}")  //
    println("a - b = ${a - b}")  //
    println("a * b = ${a * b}")  //
    println("b / a = ${b / a}")  // деление (деления целочисленных чисел будет целое число, а дробная часть отбрасываеться)
    // для сохранения дробной части необходимо, чтобы один из операндов имел тип с плавающей точкой. Пример:
    println("b / a = ${b / a.toDouble()}")
    println("b % a = ${b % a}")  // нахождение остатка от деления

    a==b  // оператор равенства
    a!=b  // оператор неравенства
    a>b   // оператор больше
    a<b   // оператор меньше
    a>=b  // оператор больше либо равно
    a<=b  // оператор меньше либо равно

}